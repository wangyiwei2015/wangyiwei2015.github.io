{"categories":[{"title":"iOS/Swift","uri":"https://wywblog.netlify.app/categories/ios/swift/"},{"title":"IoT","uri":"https://wywblog.netlify.app/categories/iot/"},{"title":"Misc","uri":"https://wywblog.netlify.app/categories/misc/"},{"title":"Windows","uri":"https://wywblog.netlify.app/categories/windows/"}],"posts":[{"content":"在 Windows 中弹出 USB 存储设备时，可能会遇到 该设备正在使用中，请关闭可能使用该设备的所有程序或窗口 。\n此时，有两种方法检查占用磁盘的程序或进程。\n资源监视器 运行 perfmon.exe 或者 | 开始 =\u0026gt; 输入 perfmon\n在 CPU 选项卡下，句柄搜索目标盘符（例 F: ），找到相应的占用者，杀之。\n事件查看器 运行 eventvwr.msc 或者 | 开始 =\u0026gt; 输入 eventvwr\n在左侧选中 Windows 日志 的 系统 ，找到 警告 级别且来源为 Kernal-PnP 的事件，会发现 XXX 已停止删除或弹出设备 USB\\XXX ，所指出的应用程序就是占用者，杀之。\n更方便的长期使用技巧：在左侧 自定义视图 上右击， 创建自定义视图 ，填写以下配置：\n记录时间：选择 近一小时 事件级别：选中 警告 按源：选中 事件来源：Kernal-PnP 以后就可以通过自定义视图查找。\n","id":0,"section":"posts","summary":"在 Windows 中弹出 USB 存储设备时，可能会遇到 该设备正在使用中，请关闭可能使用该设备的所有程序或窗口 。 此时，有两种方法检查占用磁盘的程序或进程。 资源监视","tags":["技巧"],"title":"Windows 弹出 USB 设备失败时的处理","uri":"https://wywblog.netlify.app/eject-fail/","year":"2022"},{"content":"直接退出 exit(code) // code is your exit code\r有动画，优雅地退出 UIApplication.shared.perform(#selector(NSXPCConnection.suspend))\rexit(code) // code is your exit code\r挂起（后台运行） UIApplication.shared.perform(#selector(NSXPCConnection.suspend))\r注： abort() 不会进行 cleanup 操作。\n","id":1,"section":"posts","summary":"直接退出 exit(code) // code is your exit code 有动画，优雅地退出 UIApplication.shared.perform(#selector(NSXPCConnection.suspend)) exit(code) // code is your exit code 挂起（后台运行） UIApplication.shared.perform(#selector(NSXPCConnection.suspend)) 注： abort() 不会进行 cleanup 操作。","tags":["技巧"],"title":"iOS 返回主屏幕的动画","uri":"https://wywblog.netlify.app/ios-exit-animated/","year":"2022"},{"content":"注意：只有在涉及安全/隐私等关键模块使用；考虑到 iOS 的封闭生态，通常情况下建议给用户保留重签名的机会。\nguard Bundle.main.bundleIdentifier == \u0026quot;the real bundle id\u0026quot; else {\r// do sth\rreturn\r}\r","id":2,"section":"posts","summary":"注意：只有在涉及安全/隐私等关键模块使用；考虑到 iOS 的封闭生态，通常情况下建议给用户保留重签名的机会。 guard Bundle.main.bundleIdentifier == \u0026quot;the real bundle id\u0026quot; else { // do sth return }","tags":["技巧"],"title":"iOS 应用简单防止重签名的方法","uri":"https://wywblog.netlify.app/ios-bundleid-assert/","year":"2022"},{"content":"本教程涉及的项目：\nHome Assistant HACS (HA Community Store) MIoT for HASS by ha0y MIoT for HASS by al-one Balena Etcher 目录 1. 安装 Home Assistant OS 2. 安装 HACS 3. 安装 MIoT 集成 4. 配置米家生态设备 1. 安装 Home Assistant OS 官方提供 4 种安装方式，参考 Installation 。\n本文在 树莓派 上安装 HAOS (64-bit) 。\n下载镜像 首先，从 官方仓库 下载对应的系统镜像；例如 树莓派 3 就选择 haos_rpi3-64-版本号.img.xz 。\n若下载速度慢，请参考 国内加速 。\n安装并配置 然后，用 Etcher 等工具将系统写入 SD 卡。\n完成之后挂载第一个 FAT 分区，修改默认 NTP ，具体方法参考 HAOS 安装的坑 。\n插上网线，开机。确认设备的 IP 地址：\n连接显示器，启动之后会显示本机 IP 或者检查路由器刚刚连接的设备 登录 IP:8123 ，根据网页引导完成初始设置。注意，自动定位在国内可能无效，需要手动调整到正确地理位置。\n2. 安装 HACS 安装终端 在 HASS 管理页面上，前往 配置 -\u0026gt; 加载项... -\u0026gt; + 加载项商店 -\u0026gt; `` ，\n搜索并找到 Terminal \u0026amp; SSH 。\n点击 安装 。\n安装完毕后，点击 启动 。\n启动完毕后，点击 打开 WebUI 。\n安装 HACS 根据 官方教程 ，在网页的终端中输入：\nwget -O - https://get.hacs.xyz | bash -\r注意不要遗漏任何字符 其中 https://get.hacs.xyz 可用 https://raw.githubusercontent.com/hacs/get/main/get 代替。\n等待安装自动完成，如有报错则先解决报错；在 clean install 的情况下，一般多为网络问题。\n重启 HASS 重新启动 Home Assistant 。\n在 HASS 管理页面上，前往 配置 -\u0026gt; 集成 ，清空浏览器缓存 Ctrl + F5 。\n添加集成，找到 HACS ；根据网页引导完成初始配置、关联 GitHub 账号。\n3. 安装 MIoT 集成 前往 HACS -\u0026gt; 添加 Repo ，找到 xiaomi_miot_raw 或者 hass-xiaomi-miot （二选一）安装。\n4. 配置米家生态设备 根据提示绑定小米账号，添加设备后可远程控制。\n注：旧方法的局域网 API Key 现在难以获取。\n5. 已知问题 2022-05 建议使用大内存设备。树莓派 3 的 1GB 内存会使得 HASS 不稳定，运行一段时间后会被 kill ，此时插拔电源重启。 有时启动后网页会 500 ，此时插拔电源重启。 少数情况下，重启无法解决问题，此时多重启几次。 可以关注 issues ，来查看目前版本的问题、跟踪修复进度。\n","id":3,"section":"posts","summary":"本教程涉及的项目： Home Assistant HACS (HA Community Store) MIoT for HASS by ha0y MIoT for HASS by al-one Balena Etcher 目录 1. 安装 Home Assistant OS 2. 安装 HACS 3. 安装 MIoT 集成 4. 配置米家生态设备 1. 安装 Home Assistant OS 官方提供 4 种安装方式","tags":["教程"],"title":"使用 Home Assistant 集成米家 IoT 设备","uri":"https://wywblog.netlify.app/hass-miot/","year":"2022"},{"content":"由于国内特殊网络环境，常常会遇到某些地址不可访问或速度缓慢；本页面整理了一些常用的替代站点。\n目录：| GitHub | APT | PyPI | npm | RubyGems | Homebrew | Flutter | Maven | Docker | NTP | DNS |\nGitHub 网页 油猴脚本： GitHub增强\nClone 将原URL\ngit clone https://github.com/{user}/{repo}\r替换为\ngit clone https://gitclone.com/github.com/{user}/{repo}\r推荐使用上述脚本，在网页上可以看到多个加速地址选项。\nAPT 适用于使用 apt 包管理的发行版。\n用任意文本编辑器打开 sources.list\nsudo nano /etc/apt/sources.list\r或者先安装 apt-spy 自动寻找最佳。\n可用的镜像站：\nhttp://mirrors.163.com http://mirrors.aliyun.com https://mirrors.huaweicloud.com http://mirrors.shanghaitech.edu.cn https://mirrors.ustc.edu.cn https://mirrors.tuna.tsinghua.edu.cn https://mirror.sjtu.edu.cn Debian # 原始信息\rdeb http://deb.debian.org/debian/ 后面照抄\r# deb-src http://deb.debian.org/debian/ 后面照抄\r# 修改为\rdeb 镜像站/debian/ 后面照抄\r# deb-src 镜像站/debian/ 后面照抄\rUbuntu 同上，debian 换成 ubuntu ；也可以进入桌面使用图形化的设置自动选择最佳地址。\nRaspberry Pi OS （前 Raspbian） 除了 /etc/apt/sources.list 之外，还需要编辑 /etc/apt/sources.list.d/raspi.list 文件。\n方法同上，可能有三种：debian , raspberrypi , raspbian/raspbian ，视情况照抄即可。\n对于手动编辑文件的方式，完成后更新一下： sudo apt update 。\nPyPI 可用的镜像站：\n上科大 https://mirrors.shanghaitech.edu.cn/pypi/web/simple 清华源 https://pypi.tuna.tsinghua.edu.cn/simple 中科大 http://pypi.mirrors.ustc.edu.cn/simple 阿里源 https://mirrors.aliyun.com/pypi/simple 腾讯源 http://mirrors.cloud.tencent.com/pypi/simple 豆瓣源 http://pypi.douban.com/simple 单次换源 pip install 包名 -i 源地址\r永久设置 # 设置\rpip config set global.index-url 源地址\r# 还原\rpip config unset global.index-url\rnpm 可用的镜像站：\n淘宝源 https://registry.npm.taobao.org cnpmjs http://r.cnpmjs.org/ 单次换源 npm install -选项 包名 --registry=源地址\r永久设置 # 设置\rnpm config set registry 源地址\r# 还原\rnpm config set registry https://registry.npmjs.org\rRuby Gems gem sources --remove https://rubygems.org/\rgem sources --add https://ruby.taobao.org/\rgem sources --add http://gems.ruby-china.com/\r#更新缓存\rgem sources -u\rHomebrew 加速 GitHub cd \u0026quot;$(brew --repo)\u0026quot;\rgit remote set-url origin git://mirrors.ustc.edu.cn/brew.git\rcd \u0026quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core\u0026quot;\rgit remote set-url origin git://mirrors.ustc.edu.cn/homebrew-core.git\r# 或者！\rcd \u0026quot;$(brew --repo)\u0026quot;\rgit remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/brew.git\rcd \u0026quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core\u0026quot;\rgit remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew-core.git\r# 或者！\rcd \u0026quot;$(brew --repo)\u0026quot;\rgit remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git\rcd \u0026quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core\u0026quot;\rgit remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git\r# 注：官方仓库在 github.com\r加速 bottles 新版 macOS 默认使用 zsh ，修改 ~/.zshrc 文件；其它版本修改对应的 profile 文件。\n文件末尾加入以下内容\nexport HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles\r# 或者！\rexport HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles\r然后可能需要重新打开终端使其生效。\nFlutter 以下默认替换为 flutter-io 的源；可按需选用清华源：\npub - https://mirrors.tuna.tsinghua.edu.cn/dart-pub storage - https://mirrors.tuna.tsinghua.edu.cn/flutter 修改环境变量。\nWindows 开始 -\u0026gt; 搜索 env 或找到 编辑系统环境变量 -\u0026gt; 高级 -\u0026gt; 环境变量\n选择用户或系统皆可。\n编辑或新建 PUB_HOSTED_URL ，值为 https://pub.flutter-io.cn 。\n编辑或新建 FLUTTER_STORAGE_BASE_URL ，值为 https://storage.flutter-io.cn 。\nmacOS \u0026amp; Linux 新版 macOS 默认使用 zsh ，修改 ~/.zshrc 文件；其它版本修改对应的 profile 文件。\n文件末尾加入以下内容\nexport PUB_HOSTED_URL=https://pub.flutter-io.cn\rexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn\r然后可能需要重新打开终端使其生效；运行 flutter doctor 检查。\nMaven 找到 maven 的配置文件；一般位于 apache-maven-版本\\conf\\settings.xml 。\n对于 JetBrains IDEA IDE ，找到 设置 -\u0026gt; 构建/执行/部署 -\u0026gt; 用户配置文件 的目录。\n替换 mirror 相关内容：\n\u0026lt;mirrors\u0026gt;\r\u0026lt;mirror\u0026gt;\r\u0026lt;id\u0026gt;alimaven\u0026lt;/id\u0026gt;\r\u0026lt;mirrorOf\u0026gt;central\u0026lt;/mirrorOf\u0026gt;\r\u0026lt;name\u0026gt;aliyun maven\u0026lt;/name\u0026gt;\r\u0026lt;url\u0026gt;http://maven.aliyun.com/nexus/content/repositories/central/\u0026lt;/url\u0026gt;\r\u0026lt;/mirror\u0026gt;\r\u0026lt;mirror\u0026gt;\r\u0026lt;id\u0026gt;alimaven\u0026lt;/id\u0026gt;\r\u0026lt;name\u0026gt;aliyun maven\u0026lt;/name\u0026gt;\r\u0026lt;url\u0026gt;http://maven.aliyun.com/nexus/content/groups/public/\u0026lt;/url\u0026gt;\r\u0026lt;mirrorOf\u0026gt;central\u0026lt;/mirrorOf\u0026gt;\r\u0026lt;/mirror\u0026gt;\r\u0026lt;!-- 中央仓库在中国的镜像 --\u0026gt;\r\u0026lt;mirror\u0026gt;\r\u0026lt;id\u0026gt;maven.net.cn\u0026lt;/id\u0026gt;\r\u0026lt;name\u0026gt;oneof the central mirrors in china\u0026lt;/name\u0026gt;\r\u0026lt;url\u0026gt;http://maven.net.cn/content/groups/public/\u0026lt;/url\u0026gt;\r\u0026lt;mirrorOf\u0026gt;central\u0026lt;/mirrorOf\u0026gt;\r\u0026lt;/mirror\u0026gt;\r\u0026lt;/mirrors\u0026gt;\rDocker 可用的镜像站：\nDocker中国 https://registry.docker-cn.com 网易 http://hub-mirror.c.163.com 中科大 https://docker.mirrors.ustc.edu.cn 单次换源 docker pull 源地址/myname/myrepo:mytag\r永久设置 修改 /etc/docker/daemon.json\n{\r\u0026quot;registry-mirrors\u0026quot;: [\u0026quot;源地址\u0026quot;，可以多个]\r}\rNTP 中国授时 cn.ntp.org.cn 国家授时 ntp.ntsc.ac.cn ntp.org [0-3]?.cn.pool.ntp.org （例 cn.pool.ntp.org） 阿里云 ntp[1-7].aliyun.com （例 ntp7.aliyun.com） 教育网 edu.ntp.org.cn 国内高校 s[1-9][a-z].time.edu.cn （例 北大 s1c.time.edu.cn） [!] 关于 Home Assistant 安装的一个坑 第一次开机会同步时间，默认使用 Google 服务器，于是同步失败。此后无报错但是 Docker 初始化失败，系统不能启动。解决方法是在烧录系统到 SD 卡后挂载 FAT 分区，创建 CONFIG/timesyncd.conf ，写入以下内容\n[Time]\rNTP=选一个上述NTP服务器\rFallbackNTP=再选一个NTP服务器\r再上电开机。\nDNS 114 - 114.114.114.114 或 114.114.115.115 阿里 - 223.5.5.5 或 223.6.6.6 百度 - 180.76.76.76 360 - 101.226.4.6 或 123.125.81.6 CNNIC - 1.2.4.8 或 210.2.4.8 全球服务器 Google - 8.8.8.8 或 8.8.4.4 CISCO - 208.67.22[02].22[02] （例 208.67.220.222） Cloudflare - 1.1.1.1 或 1.0.0.1 ","id":4,"section":"posts","summary":"由于国内特殊网络环境，常常会遇到某些地址不可访问或速度缓慢；本页面整理了一些常用的替代站点。 目录：| GitHub | APT | PyPI | npm | RubyGems | Homebrew | Flutter | Maven | Docker | NTP |","tags":["教程"],"title":"常用国内加速站点","uri":"https://wywblog.netlify.app/cn-mirrors/","year":"2022"}],"tags":[{"title":"index","uri":"https://wywblog.netlify.app/tags/index/"},{"title":"技巧","uri":"https://wywblog.netlify.app/tags/%E6%8A%80%E5%B7%A7/"},{"title":"教程","uri":"https://wywblog.netlify.app/tags/%E6%95%99%E7%A8%8B/"}]}